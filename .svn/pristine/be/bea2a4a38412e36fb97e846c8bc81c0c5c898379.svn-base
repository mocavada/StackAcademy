buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.palantir.gradle.docker:gradle-docker:0.19.2")
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'com.palantir.docker'

//========Docker - Start
// This is used as the docker image prefix (org)
group = 'jamesbusyqa'
bootJar {
    baseName = 'crm'
    version = '0.1.0'
}

docker {
    dependsOn build//, initConfig
    name "${project.group}/${bootJar.baseName}"
    tags 'latest'
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

//========Docker - End

repositories {
    mavenCentral()
}


dependencies {
    //aop
    compile('org.springframework.boot:spring-boot-starter-aop')

    //web
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    //thymeleaf
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')

    //JPA

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('mysql:mysql-connector-java')
    //    compile('org.postgresql:postgresql')

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0'
// https://mvnrepository.com/artifact/org.springframework.batch/spring-batch-test
    //testCompile group: 'org.springframework.batch', name: 'spring-batch-test', version: '4.1.0.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework.batch/spring-batch-core
   // compile group: 'org.springframework.batch', name: 'spring-batch-core', version: '4.1.0.RELEASE'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv
   // compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.8'
    // https://mvnrepository.com/artifact/com.h2database/h2
//    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    //developmentOnly("org.springframework.boot:spring-boot-devtools")

    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    //compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.0'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    //compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.0'
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.8.4'











}

// ========
node {
    version = "8.11.2"
    npmVersion = "6.1.0"
    download = true
    nodeModulesDir = file("frontend")
}
//======== for build dev
task buildAllFast(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildDevFast']
    nodeSetup.onlyIf {
        !nodeSetup.nodeDir.exists()
    }

    npmSetup.onlyIf {
        !npmSetup.npmDir.exists()
    }
//skip update. remove it if needed
    npmInstall.onlyIf {
        !npmSetup.npmDir.exists()
    }
}

//comm this one, for only backend
//bootRun.dependsOn(buildAllFast)
//build.dependsOn(buildAllFast)